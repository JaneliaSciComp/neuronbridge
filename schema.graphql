schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createSearch(input: CreateSearchInput!): Search @aws_cognito_user_pools @aws_iam
  deleteSearch(input: DeleteSearchInput!): Search @aws_cognito_user_pools @aws_iam
  updateSearch(input: UpdateSearchInput!): Search @aws_cognito_user_pools @aws_iam
}

type Query {
  getSearch(id: ID!): Search @aws_auth(cognito_groups : ["neuronbridge-admins"]) @aws_cognito_user_pools @aws_iam
  listAllSearches(filter: TableSearchFilterInput, limit: Int, nextToken: String): SearchConnection @aws_auth(cognito_groups : ["neuronbridge-admins"]) @aws_cognito_user_pools @aws_iam
  listItemsByOwner(identityId: ID!, limit: Int, nextToken: String, sortDirection: String): SearchConnection @aws_cognito_user_pools @aws_iam
  listSearches(filter: TableSearchFilterInput, limit: Int, nextToken: String): SearchConnection @aws_cognito_user_pools @aws_iam
}

type Search @aws_cognito_user_pools @aws_iam {
  algorithm: Algorithm
  alignFinished: AWSDateTime
  alignStarted: AWSDateTime
  alignmentErrorMessage: String
  alignmentMovie: String
  alignmentScore: String
  alignmentSize: Int
  anatomicalRegion: String
  cdsFinished: AWSDateTime
  cdsStarted: AWSDateTime
  channel: Int
  completedBatches: Int
  computedMIPs: [String]
  createdOn: AWSDateTime
  dataThreshold: Int
  displayableMask: String
  errorMessage: String
  id: ID!
  identityId: String!
  maskThreshold: Int
  maxResultsPerMask: Int
  mimeType: String
  minMatchingPixRatio: Int
  mirrorMask: Boolean
  nBatches: Int
  nTotalMatches: Int
  owner: String
  pixColorFluctuation: Float
  referenceChannel: String
  searchDir: String!
  searchMask: String
  searchType: SearchType
  selectedLibraries: [String]
  simulateMIPGeneration: Boolean
  #  step specifies the search phase:
  #    0 image uploaded
  #    1 alignment in progress
  #    2 alignment complete
  #    3 search in progress
  #    4 search complete
  step: Int
  updatedOn: AWSDateTime
  #  upload is the filename or key of the uploaded image
  upload: String!
  uploadThumbnail: String
  userDefinedImageParams: Boolean
  voxelX: Float
  voxelY: Float
  voxelZ: Float
  xyShift: Int
}

type SearchConnection @aws_cognito_user_pools @aws_iam {
  items: [Search]
  nextToken: String
}

type Subscription {
  onCreateSearch(createdOn: String, id: ID, identityId: String, step: Int): Search @aws_subscribe(mutations : ["createSearch"])
  onDeleteSearch(id: ID, identityId: String, step: Int): Search @aws_subscribe(mutations : ["deleteSearch"])
  onUpdateSearch(id: ID, identityId: String, step: Int): Search @aws_subscribe(mutations : ["updateSearch"])
}

enum Algorithm {
  avg
  max
}

enum SearchType {
  em2lm
  lm2em
}

input CreateSearchInput {
  algorithm: Algorithm
  anatomicalRegion: String
  channel: Int
  dataThreshold: Int
  identityId: String!
  maskThreshold: Int
  maxResultsPerMask: Int
  mimeType: String
  minMatchingPixRatio: Int
  mirrorMask: Boolean
  owner: String
  pixColorFluctuation: Float
  referenceChannel: String
  searchDir: String!
  searchMask: String
  searchType: SearchType
  selectedLibraries: [String]
  simulateMIPGeneration: Boolean
  step: Int!
  upload: String!
  uploadThumbnail: String
  userDefinedImageParams: Boolean
  voxelX: Float
  voxelY: Float
  voxelZ: Float
  xyShift: Int
}

input DeleteSearchInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableDateFilterInput {
  between: [AWSDateTime]
  eq: AWSDateTime
  ge: AWSDateTime
  gt: AWSDateTime
  le: AWSDateTime
  lt: AWSDateTime
  ne: AWSDateTime
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableSearchFilterInput {
  algorithm: TableStringFilterInput
  alignmentErrorMessage: TableStringFilterInput
  cdsFinished: TableDateFilterInput
  cdsStarted: TableDateFilterInput
  createdOn: TableDateFilterInput
  errorMessage: TableStringFilterInput
  id: TableIDFilterInput
  identityId: TableStringFilterInput
  owner: TableStringFilterInput
  searchType: TableStringFilterInput
  step: TableIntFilterInput
  updatedOn: TableDateFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateSearchInput {
  alignFinished: AWSDateTime
  alignStarted: AWSDateTime
  alignmentErrorMessage: String
  alignmentMovie: String
  alignmentScore: String
  alignmentSize: Int
  anatomicalRegion: String
  cdsFinished: AWSDateTime
  cdsStarted: AWSDateTime
  completedBatches: Int
  computedMIPs: [String]
  dataThreshold: Int
  displayableMask: String
  errorMessage: String
  id: ID!
  maskThreshold: Int
  maxResultsPerMask: Int
  minMatchingPixRatio: Int
  mirrorMask: Boolean
  nBatches: Int
  nTotalMatches: Int
  owner: String
  pixColorFluctuation: Float
  searchMask: String
  searchType: SearchType
  selectedLibraries: [String]
  step: Int
  uploadThumbnail: String
  xyShift: Int
}
