schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createSearch(input: CreateSearchInput!): Search @aws_cognito_user_pools @aws_iam
  deleteSearch(input: DeleteSearchInput!): Search @aws_cognito_user_pools @aws_iam
  updateSearch(input: UpdateSearchInput!): Search @aws_cognito_user_pools @aws_iam
}

type Query {
  getSearch(id: ID!): Search @aws_cognito_user_pools @aws_iam
  listSearches(filter: TableSearchFilterInput, limit: Int, nextToken: String): SearchConnection @aws_cognito_user_pools @aws_iam
}

type Search @aws_cognito_user_pools @aws_iam {
  algorithm: Algorithm
  createdOn: AWSDateTime
  id: ID!
  identityId: String!
  mimeType: String
  owner: String
  searchType: SearchType
  step: Int
  updatedOn: AWSDateTime
  upload: String
}

type SearchConnection @aws_cognito_user_pools @aws_iam {
  items: [Search]
  nextToken: String
}

type Subscription {
  onCreateSearch(createdOn: String, id: ID, step: Int): Search @aws_subscribe(mutations : ["createSearch"])
  onDeleteSearch(id: ID, step: Int): Search @aws_subscribe(mutations : ["deleteSearch"])
  onUpdateSearch(id: ID, step: Int): Search @aws_subscribe(mutations : ["updateSearch"])
}

enum Algorithm {
  avg
  max
}

enum SearchType {
  em2lm
  lm2em
}

input CreateSearchInput {
  algorithm: Algorithm!
  identityId: String!
  mimeType: String
  searchType: SearchType!
  step: Int!
  upload: String!
}

input DeleteSearchInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableSearchFilterInput {
  id: TableIDFilterInput
  step: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateSearchInput {
  id: ID!
  step: Int
}
